generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String        @id @default(uuid())
  clerkId            String        @unique
  username           String        @unique
  email              String        @unique
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  role               UserRole      @default(USER)
  Auctions           Auction[]     @relation("HighestBidder")
  Bids               Bid[]
  Orders             Order[]
  Payments           Payment[]     @relation("UserPayments")
  TransactionsBuyer  Transaction[] @relation("BuyerTransactions")
  TransactionsSeller Transaction[] @relation("SellerTransactions")
  wonAuctions        Auction[]     @relation("Winner") // ✅ เพิ่มฟิลด์เพื่อเชื่อม Winner
  password  String?  // ✅ ต้องมีฟิลด์นี้
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String
  imageUrl    String
  price       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Card {
  id          String    @id @default(uuid())
  name        String
  category    String
  imageUrl    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String?
  auctions    Auction[] @relation("CardAuctions")
}

model Auction {
  id              String        @id @default(uuid())
  cardId          String
  startPrice      Float
  currentPrice    Float
  highestBidderId String?
  winnerId        String?  
  startTime       DateTime
  endTime         DateTime
  isClosed        Boolean       @default(false)
  status          AuctionStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  description     String?
  imageUrl        String?
  cardName        String
  category        String?
  card            Card          @relation("CardAuctions", fields: [cardId], references: [id], onDelete: Cascade)
  highestBidder   User?         @relation("HighestBidder", fields: [highestBidderId], references: [id])
  winner          User?         @relation("Winner", fields: [winnerId], references: [id]) // ✅ ใช้ Relation ที่สมบูรณ์
  Bids            Bid[]
  Transactions    Transaction[] @relation("AuctionTransactions")
  endedAt         DateTime?

  @@index([cardId])
}

model Bid {
  id        String   @id @default(uuid())
  auctionId String
  bidderId  String
  amount    Float
  bidTime   DateTime @default(now())
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder    User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([auctionId])
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  totalAmount   Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentMethod PaymentMethod @default(PROMPTPAY)
  paymentStatus PaymentStatus @default(PENDING)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         OrderItem[]
  Payments      Payment[]     @relation("OrderPayments")

  @@index([userId])
}

model OrderItem {
  id       String @id @default(uuid())
  orderId  String
  name     String
  imageUrl String
  quantity Int
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String        @id @default(uuid())
  auctionId       String
  buyerId         String
  sellerId        String
  price           Float
  transactionDate DateTime      @default(now())
  paymentMethod   PaymentMethod @default(PROMPTPAY)
  paymentStatus   PaymentStatus @default(PENDING)
  auction         Auction       @relation("AuctionTransactions", fields: [auctionId], references: [id], onDelete: Cascade)
  buyer           User          @relation("BuyerTransactions", fields: [buyerId], references: [id], onDelete: Cascade)
  seller          User          @relation("SellerTransactions", fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([auctionId])
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  orderId         String?
  amount          Float
  paymentDate     DateTime      @default(now())
  proofOfTransfer String?
  qrCodeUrl       String?
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  order           Order?        @relation("OrderPayments", fields: [orderId], references: [id], onDelete: Cascade)
  user            User          @relation("UserPayments", fields: [userId], references: [id], onDelete: Cascade)
  items           PaymentItem[]

  @@index([userId])
  @@index([orderId])
}

model PaymentItem {
  id        String  @id @default(uuid())
  paymentId String
  name      String
  imageUrl  String
  quantity  Int
  orderId   String?
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

enum AuctionStatus {
  PENDING
  LIVE
  ACTIVE
  CLOSED
  COMPLETED
}

enum PaymentMethod {
  PROMPTPAY
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum UserRole {
  USER
  ADMIN
}
