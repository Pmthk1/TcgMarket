import { createClerkClient } from "@clerk/backend";

const clerkClient = createClerkClient({
  secretKey: process.env.CLERK_SECRET_KEY,
});

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Public Metadata ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Clerk
 * @param userId ‡∏£‡∏´‡∏±‡∏™ Clerk ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param metadata ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Metadata ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
export const updateUserMetadata = async (
  userId: string,
  metadata: Record<string, unknown>
) => {
  try {
    const user = await clerkClient.users.updateUser(userId, {
      publicMetadata: {
        ...metadata,
      },
    });
    console.log(`‚úÖ Updated public metadata for user ${userId}:`, user.publicMetadata);
  } catch (error) {
    console.error(`‚ùå Failed to update metadata for user ${userId}:`, error);
  }
};

/**
 * ‡∏î‡∏∂‡∏á Public Metadata ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Clerk
 * @param userId ‡∏£‡∏´‡∏±‡∏™ Clerk ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @returns ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Metadata ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
export const getUserMetadata = async (userId: string) => {
  try {
    const user = await clerkClient.users.getUser(userId);
    console.log(`üìå Current Metadata for ${userId}:`, user.publicMetadata);
    return user.publicMetadata;
  } catch (error) {
    console.error(`‚ùå Failed to fetch metadata for user ${userId}:`, error);
    return null;
  }
};